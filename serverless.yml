service: tinyauth-graphql-api
app: tinyauth-graphql-api
name: tinyauth-graphql-api

plugins:
  - serverless-offline
  - serverless-wsgi
  - serverless-dotenv-plugin
  - serverless-python-requirements
  - serverless-domain-manager

package:
  exclude:
    - package-lock.json
    - node_modules/**
    - tests/**
    - venv/**
    - .pytest_cache/**
    - __pycache__/**

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: python3.7

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["tinyauthtable", "Arn"] }
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource:
        - "*"
  environment:
    STAGE: ${self:provider.stage}
    TABLE_NAME: ${env:TABLE_NAME}
    API_SECRET: ${env:API_SECRET}

custom:
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
  wsgi:
    app: app.app
    packRequirements: false
  dotenv:
    path: ./.env
    basePath: ./
    include:
      - TABLE_NAME
      - API_SECRET
      - DOMAIN_NAME

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: ANY {proxy+}

resources:
  Resources:
    tinyauthtable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tinyauth-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
